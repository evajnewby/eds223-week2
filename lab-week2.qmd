---
title: "EDS 223: Week 2"
author: "Eva Newby"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
rm(list = ls())
library(sf)
library(tidyverse)
library(spData)
library(tmap)
```

```{r}
london_point <- st_point(c(0.1, 51.5))

london_geom <- st_sfc(london_point, crs = 4326)

london_attrib <- data.frame(
  name = "London",
  temperature = 25,
  date = as.Date("2017-06-21")
)

london_sf <- st_sf(london_attrib, geometry = london_geom)

class(london_sf)
```

```{r}
st_crs(london_sf)$IsGeographic
# tells us the coordinate system we are using
```

```{r}
# Work with global data

world <- spData::world
class(world)

names(world)

summary(world$lifeExp)
```

```{r}
world_df <- world %>%
  select(-geom)

colnames(world_df)
# sf has made iti very hard to get rid of the geometry column, see how the above didn't work 

# if we really want to get rid of it...

world_df <- st_drop_geometry(world)
class(world_df)
```

## Reprojecting data

```{r}
london_proj <- data.frame(x = 53000, y = 180000) %>%
  st_as_sf(coords = c("x", "y"), crs = "EPSG:27700")

st_crs(london_proj) == st_crs(london_sf) # build in checks like these
```

```{r}
london_sf_transform <- st_transform(london_sf, crs = st_crs(london_proj))

# self check examples
if (st_crs(london_sf_transform) == st_crs(london_proj)) {
  print ("coordinate reference systems of datasets match")
} else {
  warning("coordinate reference systems do not match")
} 

```

```{r}
tm_shape(world, projection = 8857) +
  tm_fill(col = "area_km2")
```

```{r}
tm_shape(world, projection = 3395) +
  tm_fill(col = "area_km2")
```

## Vector attribute subsetting

```{r}
# Dplyr select
world %>%
  select(name_long, pop)


world %>%
  select(-subregion)

world %>%
  select(name = name_long, population = pop)

# Filter
world1 <- world %>%
  filter(area_km2 < 10000)

world %>%
  filter(continent == "Asia") %>%
  select(name_long, continent, lifeExp) %>%
  slice_max(lifeExp) %>%
  st_drop_geometry()
```

```{r}
world %>%
  group_by(continent) %>%
  summarise(population = sum(pop, na.rm = TRUE)) %>%
  st_drop_geometry()
```

```{r}
# Joins with spatial data

coffee_data <- spData::coffee_data

nrow(coffee_data)
nrow(world)
```

```{r}
world_coffee <- left_join(world, coffee_data, by = "name_long")
```

```{r}
tm_shape(world_coffee) +
  tm_fill(col = "coffee_production_2017")
```

```{r}
# Let's try an inner join
world_coffee_inner <- inner_join(world, coffee_data, by = "name_long")

# checkpoint
if(nrow(world_coffee_inner) < nrow(coffee_data)){
  warning("inner join does not match original data. potential data loss during join")
}
```

```{r}
setdiff(coffee_data$name_long, world$name_long)

```

```{r}
# we want to keep DR Congo
drc <- stringr::str_subset(world$name_long, "Dem*.+Congo")

coffee_data$name_long[stringr::str_detect(coffee_data$name_long, "Congo")] <- drc

# go back up and test inner join again
```


```{r}
tm_shape(world_coffee_inner) +
  tm_polygons(fill = "coffee_production_2017",
              title = "Coffee producition (2017)") +
  tm_layout(legend.outside = TRUE)
```

```{r}
coffee_world <- left_join(coffee_data, world, by = "name_long")
class(coffee_world)
```

